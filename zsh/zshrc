setopt localoptions promptsubst

export EDITOR='code -w'
export GOPATH="$HOME/go"
export JAVA_HOME="/Applications/Android Studio.app/Contents/jre/jdk/Contents/Home"
export GEM_HOME="$HOME/.gem"

export PATH="/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/usr/local/go/bin:$PATH"
export PATH="$HOME/.dotfiles/bin:$PATH"
export PATH="$PATH:$HOME/.gem/bin"
export PATH="$PATH:$GOPATH/bin"
export PATH="$PATH:$HOME/.cargo/bin"
export PATH="$PATH:/usr/local/opt/gnu-sed/libexec/gnubin" # gnu-sed
export PATH="$PATH:$HOME/Library/Android/sdk/platform-tools"

# Load files
for file ($HOME/.dotfiles/zsh/*.zsh) source $file

# Command timings
strlen () {
  FOO=$1
  local zero='%([BSUbfksu]|([FB]|){*})'
  LEN=${#${(S%%)FOO//$~zero/}}
  echo $LEN
}

# Timer
REPORTTIME=10 # print elapsed time when more than 10 seconds

# Show right prompt with date ONLY when command is executed
preexec () {
  DATE=$( date +"%H:%M:%S" )
  local len_right=$( strlen "$DATE" )
  len_right=$(( $len_right+1 ))
  local right_start=$(($COLUMNS - $len_right))

  local len_cmd=$( strlen "$@" )
  local len_prompt=$(strlen "$PROMPT" )
  local len_left=$(($len_cmd+$len_prompt))

  RDATE="\033[${right_start}C ${DATE}"

  if [ $len_left -lt $right_start ]; then
    # command does not overwrite right prompt
    # ok to move up one line
    echo -e "\033[1A${RDATE}"
  else
    echo -e "${RDATE}"
  fi
}

# Keep Apple Terminal.app's current working directory updated
# based on this answer: http://superuser.com/a/315029
# with extra fixes to handle multibyte chars and non-UTF-8 locales
if [[ "$TERM_PROGRAM" == "Apple_Terminal" ]] && [[ -z "$INSIDE_EMACS" ]]; then
  # Emits the control sequence to notify Terminal.app of the cwd
  # Identifies the directory using a file: URI scheme, including
  # the host name to disambiguate local vs. remote paths.
  function update_terminalapp_cwd() {
    emulate -L zsh

    # Percent-encode the pathname.
    local URL_PATH="$(omz_urlencode -P $PWD)"
    [[ $? != 0 ]] && return 1

    # Undocumented Terminal.app-specific control sequence
    printf '\e]7;%s\a' "file://$HOST$URL_PATH"
  }

  # Use a precmd hook instead of a chpwd hook to avoid contaminating output
  precmd_functions+=(update_terminalapp_cwd)
  # Run once to get initial cwd set
  update_terminalapp_cwd
fi

# make GPG stuff work

GPG_AGENT_SOCKET="$(gpgconf --list-dirs agent-ssh-socket)"
if [ ! -S $GPG_AGENT_SOCKET ]; then
  gpg-agent --daemon --pinentry-program /usr/local/bin/pinentry-mac >/dev/null 2>&1
  export GPG_TTY=$(tty)
fi

## Randoms

if which swiftenv > /dev/null; then eval "$(swiftenv init -)"; fi

eval "$(direnv hook zsh)"

# Load NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# Ruby
source /usr/local/opt/chruby/share/chruby/chruby.sh
source /usr/local/opt/chruby/share/chruby/auto.sh

# Load gcloud things
source /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc
source /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc

# Set up the actual prompt
precmd() {
  setopt extendedglob

  local current_pwd="${PWD/#$HOME/~}"
  local ret_directory

  # Split path components
  local pcs=("${(@s:/:)current_pwd}")
  # Length of array of path components
  local pcs_len="${#pcs[@]}"

  # Number of full path components you want at the end of the path
  local full_pc_len=2

  if [[ "${current_pwd}" == (#m)[/~] ]]; then
    ret_directory="$MATCH"
    unset MATCH
  elif [ ${#pcs[@]} -ge $((full_pc_len + 1)) ]; then
    local path_full_comps=$((pcs_len - full_pc_len))
    local short_path_comps="${(@j:/:M)${pcs[@]:0:$((path_full_comps))}##.#?}"
    local full_path_comps="/${${(@j:/:)${pcs[@]:$((pcs_len - full_pc_len)):$((full_pc_len))}}//\%/%%}"
    ret_directory="${short_path_comps}${full_path_comps}"
  else
    ret_directory="${current_pwd}"
  fi

  unset current_pwd

  vcs_info
  PROMPT="${ret_directory}$(prompt_git) %F{magenta}‚ùØ %f"
}
